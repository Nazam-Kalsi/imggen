// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  //postgresql://test:test@localhost:5432/myDB?schema=public"
}

model User {
  id        String        @unique @default(uuid())
  userName  String
  email     String        @unique
  avatarUrl String?       @default("https://picsum.photos/200")
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  prompts   UserPrompts[]
  models    Models[]
}

model UserPrompts {
  id        String   @unique @default(uuid())
  prompt    String
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Pack {
  id          String        @unique @default(uuid())
  packName    String        @unique()
  description String        @default("")
  imageUrl    String?       @default("https://picsum.photos/200")
  prompts     PackPrompts[]
}

model PackPrompts {
  id     String @unique @default(uuid())
  prompt String
  packId String
  pack   Pack   @relation(fields: [packId], references: [id], onDelete: Cascade)
}

model Models {
  id             String           @unique @default(uuid())
  name           String
  type           type
  ethinicity     ethinicity
  eyeColor       eyeColor
  bald           Boolean
  status         status           @default(pending)
  zipUrl         String?          @default("")
  // images      String[]        // we gonna have new table which contain training images
  trainingImages TrainingImages[]
  outputImages   OutputImages[]
  userId         String
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
}

model TrainingImages {
  id        String   @unique @default(uuid())
  imagesUrl String[]
  modelId   String
  model     Models   @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OutputImages {
  id                      String   @unique @default(uuid())
  imageUrl                String?  
  prompt                  String?
  modelId                 String
  userId                  String
  isGeneratedSuccessfully Boolean  @default(false)
  model                   Models   @relation(fields: [modelId], references: [id], onDelete: Cascade)
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
}

enum eyeColor {
  blue
  green
  brown
  black
  gray
  hazel
  amber
  pink
  red
  yellow
  turquoise
  violet
}

enum ethinicity {
  white
  nigga
  chinese
}

enum type {
  man
  woman
  other
}

enum status {
  pending
  success
  failed
}
